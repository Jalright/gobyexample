// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Markdown is an object representing the database table.
type Markdown struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Content   null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	IsDeleted uint8       `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	IsDraft   uint8       `boil:"is_draft" json:"is_draft" toml:"is_draft" yaml:"is_draft"`
	CreatedAt uint        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt uint        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *markdownR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L markdownL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarkdownColumns = struct {
	ID        string
	Content   string
	IsDeleted string
	IsDraft   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Content:   "content",
	IsDeleted: "is_deleted",
	IsDraft:   "is_draft",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var MarkdownWhere = struct {
	ID        whereHelperuint
	Content   whereHelpernull_String
	IsDeleted whereHelperuint8
	IsDraft   whereHelperuint8
	CreatedAt whereHelperuint
	UpdatedAt whereHelperuint
}{
	ID:        whereHelperuint{field: "`markdown`.`id`"},
	Content:   whereHelpernull_String{field: "`markdown`.`content`"},
	IsDeleted: whereHelperuint8{field: "`markdown`.`is_deleted`"},
	IsDraft:   whereHelperuint8{field: "`markdown`.`is_draft`"},
	CreatedAt: whereHelperuint{field: "`markdown`.`created_at`"},
	UpdatedAt: whereHelperuint{field: "`markdown`.`updated_at`"},
}

// MarkdownRels is where relationship names are stored.
var MarkdownRels = struct {
}{}

// markdownR is where relationships are stored.
type markdownR struct {
}

// NewStruct creates a new relationship struct
func (*markdownR) NewStruct() *markdownR {
	return &markdownR{}
}

// markdownL is where Load methods for each relationship are stored.
type markdownL struct{}

var (
	markdownAllColumns            = []string{"id", "content", "is_deleted", "is_draft", "created_at", "updated_at"}
	markdownColumnsWithoutDefault = []string{"content"}
	markdownColumnsWithDefault    = []string{"id", "is_deleted", "is_draft", "created_at", "updated_at"}
	markdownPrimaryKeyColumns     = []string{"id"}
)

type (
	// MarkdownSlice is an alias for a slice of pointers to Markdown.
	// This should generally be used opposed to []Markdown.
	MarkdownSlice []*Markdown
	// MarkdownHook is the signature for custom Markdown hook methods
	MarkdownHook func(context.Context, boil.ContextExecutor, *Markdown) error

	markdownQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	markdownType                 = reflect.TypeOf(&Markdown{})
	markdownMapping              = queries.MakeStructMapping(markdownType)
	markdownPrimaryKeyMapping, _ = queries.BindMapping(markdownType, markdownMapping, markdownPrimaryKeyColumns)
	markdownInsertCacheMut       sync.RWMutex
	markdownInsertCache          = make(map[string]insertCache)
	markdownUpdateCacheMut       sync.RWMutex
	markdownUpdateCache          = make(map[string]updateCache)
	markdownUpsertCacheMut       sync.RWMutex
	markdownUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var markdownBeforeInsertHooks []MarkdownHook
var markdownBeforeUpdateHooks []MarkdownHook
var markdownBeforeDeleteHooks []MarkdownHook
var markdownBeforeUpsertHooks []MarkdownHook

var markdownAfterInsertHooks []MarkdownHook
var markdownAfterSelectHooks []MarkdownHook
var markdownAfterUpdateHooks []MarkdownHook
var markdownAfterDeleteHooks []MarkdownHook
var markdownAfterUpsertHooks []MarkdownHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Markdown) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Markdown) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Markdown) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Markdown) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Markdown) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Markdown) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Markdown) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Markdown) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Markdown) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markdownAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarkdownHook registers your hook function for all future operations.
func AddMarkdownHook(hookPoint boil.HookPoint, markdownHook MarkdownHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		markdownBeforeInsertHooks = append(markdownBeforeInsertHooks, markdownHook)
	case boil.BeforeUpdateHook:
		markdownBeforeUpdateHooks = append(markdownBeforeUpdateHooks, markdownHook)
	case boil.BeforeDeleteHook:
		markdownBeforeDeleteHooks = append(markdownBeforeDeleteHooks, markdownHook)
	case boil.BeforeUpsertHook:
		markdownBeforeUpsertHooks = append(markdownBeforeUpsertHooks, markdownHook)
	case boil.AfterInsertHook:
		markdownAfterInsertHooks = append(markdownAfterInsertHooks, markdownHook)
	case boil.AfterSelectHook:
		markdownAfterSelectHooks = append(markdownAfterSelectHooks, markdownHook)
	case boil.AfterUpdateHook:
		markdownAfterUpdateHooks = append(markdownAfterUpdateHooks, markdownHook)
	case boil.AfterDeleteHook:
		markdownAfterDeleteHooks = append(markdownAfterDeleteHooks, markdownHook)
	case boil.AfterUpsertHook:
		markdownAfterUpsertHooks = append(markdownAfterUpsertHooks, markdownHook)
	}
}

// One returns a single markdown record from the query.
func (q markdownQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Markdown, error) {
	o := &Markdown{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for markdown")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Markdown records from the query.
func (q markdownQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarkdownSlice, error) {
	var o []*Markdown

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Markdown slice")
	}

	if len(markdownAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Markdown records in the query.
func (q markdownQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count markdown rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q markdownQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if markdown exists")
	}

	return count > 0, nil
}

// Markdowns retrieves all the records using an executor.
func Markdowns(mods ...qm.QueryMod) markdownQuery {
	mods = append(mods, qm.From("`markdown`"))
	return markdownQuery{NewQuery(mods...)}
}

// FindMarkdown retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarkdown(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Markdown, error) {
	markdownObj := &Markdown{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `markdown` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, markdownObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from markdown")
	}

	return markdownObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Markdown) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no markdown provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(markdownColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	markdownInsertCacheMut.RLock()
	cache, cached := markdownInsertCache[key]
	markdownInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			markdownAllColumns,
			markdownColumnsWithDefault,
			markdownColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(markdownType, markdownMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(markdownType, markdownMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `markdown` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `markdown` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `markdown` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, markdownPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into markdown")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == markdownMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for markdown")
	}

CacheNoHooks:
	if !cached {
		markdownInsertCacheMut.Lock()
		markdownInsertCache[key] = cache
		markdownInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Markdown.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Markdown) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	markdownUpdateCacheMut.RLock()
	cache, cached := markdownUpdateCache[key]
	markdownUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			markdownAllColumns,
			markdownPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update markdown, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `markdown` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, markdownPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(markdownType, markdownMapping, append(wl, markdownPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update markdown row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for markdown")
	}

	if !cached {
		markdownUpdateCacheMut.Lock()
		markdownUpdateCache[key] = cache
		markdownUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q markdownQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for markdown")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for markdown")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarkdownSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), markdownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `markdown` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, markdownPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in markdown slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all markdown")
	}
	return rowsAff, nil
}

var mySQLMarkdownUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Markdown) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no markdown provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(markdownColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMarkdownUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	markdownUpsertCacheMut.RLock()
	cache, cached := markdownUpsertCache[key]
	markdownUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			markdownAllColumns,
			markdownColumnsWithDefault,
			markdownColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			markdownAllColumns,
			markdownPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert markdown, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "markdown", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `markdown` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(markdownType, markdownMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(markdownType, markdownMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for markdown")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == markdownMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(markdownType, markdownMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for markdown")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for markdown")
	}

CacheNoHooks:
	if !cached {
		markdownUpsertCacheMut.Lock()
		markdownUpsertCache[key] = cache
		markdownUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Markdown record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Markdown) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Markdown provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), markdownPrimaryKeyMapping)
	sql := "DELETE FROM `markdown` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from markdown")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for markdown")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q markdownQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no markdownQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from markdown")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for markdown")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarkdownSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(markdownBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), markdownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `markdown` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, markdownPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from markdown slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for markdown")
	}

	if len(markdownAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Markdown) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarkdown(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarkdownSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarkdownSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), markdownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `markdown`.* FROM `markdown` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, markdownPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MarkdownSlice")
	}

	*o = slice

	return nil
}

// MarkdownExists checks if the Markdown row exists.
func MarkdownExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `markdown` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if markdown exists")
	}

	return exists, nil
}
